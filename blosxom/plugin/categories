# Blosxom Plugin: categories					   -*- perl -*-
# Author: Todd Larason (jtl@molehill.org)
# Version: 0+4i
# Blosxom Home/Docs/Licensing: http://www.raelity.org/blosxom
# Categories plugin Home/Docs/Licensing:
#   http://molelog.molehill.org/blox/Computers/Internet/Web/Blosxom/Categories/

package categories;

# --- Configuration Variables ---
# should the story-count include child dirs?
$story_count_cumulative = 1 unless defined $story_count_cumulative;

# What should the root (unnamed) category be called?
$root_cat_name = "Root" unless defined $root_cat_name;

# directories to include, but not children of -- full name under $datadir
@prune_dirs = () if ($#prune_dirs < 0);

# set to 0 to disable attempted caching
$use_caching = 1 unless defined $use_caching;
$debug_level = 1 unless defined $debug_level;
# ------------------------------------------------------------


use FileHandle;

$categories = '';
$breadcrumbs = '';

my $package    = "categories";
my $cachefile  = "$blosxom::plugin_state_dir/.$package.cache";
my $cache;
my $save_cache = 0;

sub debug {
    my ($level, @msg) = @_;

    if ($debug_level >= $level) {
	print STDERR "$package debug $level: @msg\n";
    }
    1;
}

sub load_template {
    my ($bit) = @_;
    return $blosxom::template->('', "$package.$bit", $blosxom::flavour);
}

sub report {
  my ($bit, $url, $fulldir, $thisdir, $numstories, $indent_level) = @_;
  my $f 	= load_template($bit);
  my $indent 	= load_template("indent") x $indent_level;
  my $prettydir = $thisdir;
  $prettydir =~ s:([a-z])([A-Z]):\1 \2:g;
  $prettydir =~ s:_: :g;
  $f =~ s/((\$[\w:]+)|(\$\{[\w:]+\}))/$1 . "||''"/gee;
  return $f;
}

sub is_prune_dir {
    my ($dir) = @_;
    foreach (@prune_dirs) {
	if ($dir eq $_) {
	    debug(2, "$dir is prune_dir");
	    return 1;
	}
    }
    return 0;
}

sub report_categories_dir {
    my ($browsecat, $parent, $dir, $indent_level) = @_;
    my $results;
    local $_;

    my $key = "$parent|$dir|"; 
    # are we looking at a dir that contains the currently-browsed dir?
    # if so, it matters exactly what dir that is -- if we aren't, it doesn't
    # XXX there has *got* to be a better way to check this
    # XXXX opt, test: "$browsecat/", length + 1, eq "$parent$dir/"
    $key .= "$browsecat"
	if (substr("$browsecat", 0, length("$parent$dir"))
	    eq "$parent$dir");
    $results = $cache->{categories_dir}{$blosxom::flavour}{$key};
    return $results if defined($results);

    debug(1, "cache miss: $key");
    $save_cache = 1;

    debug(4, "report_categories_dir($parent, $dir) called");
    my $fulldir    = "$blosxom::datadir$parent$dir";
    my $fullpubdir = "$parent$dir";
    my $url 	   = "$blosxom::url$parent$dir";
    my $numstories = $cache->{stories}{$fulldir};

    # create the line for this directory
    $results .= report(("$browsecat" eq "$parent$dir") ? 
		       'this_dir_head' : 'dir_head', 
		       $url, $fullpubdir, $dir, $numstories, $indent_level);

    # now make the list of its children, if there are any
    if (defined($cache->{children}{$fulldir}[0]) && 
	!is_prune_dir("$parent$dir")) {
	$results .= report('subtree_head', $url, $fullpubdir, 
			   $dir, $numstories);
	foreach (sort @{$cache->{children}{$fulldir}}) {
	    $results .= report_categories_dir($browsecat, "$parent$dir/", 
					      $_, $indent_level+1);
	}
	$results .= report('subtree_foot', $url, $fullpubdir, 
			   $dir, $numstories);
    }
    $results .= report(("$browsecat" eq "$parent$dir") ? 
		       'this_dir_foot' : 'dir_foot', 
		       $url, $fullpubdir, $dir, $numstories);
    debug(4, "report_categories_dir($parent, $dir) exiting");

    $cache->{categories_dir}{$blosxom::flavour}{$key} = $results;
    return $results;
}

sub report_categories {
    my ($browsecat) = @_;
    my $results;

    my $key = $browsecat;
    $results = $cache->{categories}{$blosxom::flavour}{$key};
    return $results if defined($results);

    debug(1, "cache miss: categories root $key");
    $save_cache = 1;

    debug(3, "report_categories() called");

    my $url = "$blosxom::url";
    my $numstories = $cache->{stories}{$blosxom::datadir};
    $results  = report('head');
# XXX can this be replaced with a single report_categories_dir() call?
    $results .= report($browsecat eq '/' ? 'this_dir_head' : 'dir_head',
		       $url,'/', $root_cat_name, $numstories, 0);
    $results .= report('subtree_head', $url, '/', $root_cat_name, $numstories);
    
    foreach (sort @{$cache->{children}{$blosxom::datadir}}) {
	$results .= report_categories_dir($browsecat, '/', $_, 1);
    }
    $results .= report('subtree_foot', $url, '/', $root_cat_name, $numstories);
    $results .= report($browsecat eq '/' ? 'this_dir_foot' : 'dir_foot',
		       $url,'/', '/', $numstories);
# XXXXXXXX
    $results .= report('foot');

    debug(3, "report_categories() exiting, length(\$results) =", 
	  length($results));

    $cache->{categories}{$blosxom::flavour}{$key} = $results;

    return $results;
}

sub report_breadcrumbs {
    my ($browsecat) = @_;
    my $results;

    my $key = $browsecat;
    $results = $cache->{breadcrumbs}{$blosxom::flavour}{$key};
    return $results if defined($results);
    
    debug(1, "cache miss: breadcrumbs $key");
    $save_cache = 1;

    debug(3, "report_breadcrumbs() called");

    my @current = split '/',$browsecat;
    my $results = report('breadcrumb_head');

    my $current = '';
    my $last = pop @current;
    while (@current) {
	$current .= $current[0] ? "/$current[0]" : '';
	$results .= report('breadcrumb_dir', 
			   "$blosxom::url$current", 
			   $current ? $current : '/', 
			   $current[0] ? $current[0] : $root_cat_name, 
			   $cache->{stories}{"$blosxom::datadir$current"});
	$results .= report('breadcrumb_between_dir');
	shift @current;
    }
    $current .= $last ? "/$last" : '';
    $results .= report('breadcrumb_this_dir', 
		       "$blosxom::url$current", 
		       $current ? $current : '/', 
		       $last ? $last : $root_cat_name, 
		       $cache->{stories}{"$blosxom::datadir$current"});

    my @children = sort @{$cache->{children}{"$blosxom::datadir$current"}};
    if (@children) {
	$results .= report('breadcrumb_child_head');
	while (@children) {
	    my $child = shift @children;
	    $results .= report('breadcrumb_child_dir', 
			       "$blosxom::url$current/$child", 
			       "$current/$child", "$child", 
			       $cache->{stories}{"$blosxom::datadir$current/$child"});
	    $results .= report('breadcrumb_between_child') if (@children);
	}
	$results .= report('breadcrumb_child_foot');
    }
    $results .= report('breadcrumb_foot');

    $cache->{breadcrumbs}{$blosxom::flavour}{$key} = $results;

    return $results;
}

sub prime_cache {
    my ($num_files) = @_;
    return 0 if (!$use_caching);
    eval "require Storable";
    if ($@) {
	debug(1, "cache disabled, Storable not available"); 
	$use_caching = 0; 
	return 0;
    }
    if (!Storable->can('lock_retrieve')) {
	debug(1, "cache disabled, Storable::lock_retrieve not available");
	$use_caching = 0;
	return 0;
    }
    $cache = (-r $cachefile ? Storable::lock_retrieve($cachefile) : undef);
    # >= rather than ==, so that if we're being used along with a search
    # plugin that reduces %files, rather than dumping the cache and showing
    # a limited category, we'll display the full thing (if available) .  I 
    # think that's preferable as well as being more efficient.
    # XXX improvement: rather than dumping the whole thing, just update the
    # counts and dump the tree that includes the new story
    if ($cache && $cache->{num_files} >= $num_files) {
	debug(1, "Using cached state");
	return 1;
    }
    debug(1, "Flushing cache, $cache->{num_files} < $num_files");
    $cache = {num_files => $num_files};
    return 0;
}

sub save_cache {
    return if (!$use_caching || !$save_cache);
    debug(1, "Saving cache");
    Storable::lock_store($cache, $cachefile);
}


sub start {
    debug(1, "start() called, enabled");
    while (<DATA>) {
	last if /^(__END__)?$/;
	chomp;
	my ($flavour, $comp, $txt) = split ' ',$_,3;
	$txt =~ s:\\n:\n:g;
	$blosxom::template{$flavour}{"$package.$comp"} = $txt;
    }
    return 1;
}

sub filter {
    my ($pkg, $files) = @_;

    debug(1, "filter() called,", scalar(keys %$files), "files");
    debug(2, "\@prune_dirs = :@prune_dirs:");
    debug(2, "\$blosxom::datadir: $blosxom::datadir");

    return 1 if prime_cache(scalar keys %$files);
    
    foreach (keys %{$files}) {
	my ($dir, $file) = m:(.*)/(.*):;
	my $child;
	$cache->{stories}{$dir}++;
	while ($dir ne $blosxom::datadir) {
	    ($dir, $child) = ($dir =~ m:(.*)/(.*):);
	    $cache->{stories}{$dir}++ if $story_count_cumulative;
	    if (!$seen{"$dir/$child"}++) {
		push @{$cache->{children}{$dir}}, $child;
	    }
	}
    }

    # valid to do here too, but a good idea?

    save_cache(); $save_cache = 0;

    if ($debug_level >= 5) {
	debug(5, "\$stories{$_} = $cache->{stories}{$_}") 
	    foreach (keys %{$cache->{stories}});
	debug(5, "\$children{$_} = [", @{$cache->{children}{$_}}, "]") 
	    foreach (keys %{$cache->{stories}});
    }
    debug(1, "filter() exiting", scalar(keys %{$cache->{stories}}), " dirs");
    return 1;
}

sub head {
    debug(1, "head() called");

    my $browsecat = "/$blosxom::path_info";
    if ($browsecat =~ s:/[^/]+\.[^/]+$::) {
	# $browsecat = "--STORY--"
    }

    $categories  = report_categories($browsecat);
    $breadcrumbs = report_breadcrumbs($browsecat);

    save_cache();

    debug(1, "head() exiting, length(\$categories) =", length ($categories));
    return 1;
}

1;


__DATA__
error head <ul class="categories">\n
error dir_head <li><a href="$url/index.$blosxom::flavour">$prettydir</a> ($numstories)\n
error this_dir_head <li class="this-category">$prettydir ($numstories)\n
error indent 
error subtree_head <ul>\n
error subtree_foot </ul>\n
error dir_foot </li>\n
error this_dir_foot </li>\n
error foot </ul>\n
error breadcrumb_head <div class="breadcrumb">\n
error breadcrumb_dir <a href="$url/index.$blosxom::flavour">$prettydir</a>
error breadcrumb_this_dir <span class="breadcrumb-this">$prettydir</span>
error breadcrumb_between_dir \n::\n
error breadcrumb_child_head \n:: {\n
error breadcrumb_child_dir <a href="$url/index.$blosxom::flavour">$prettydir</a>\n
error breadcrumb_between_child |\n
error breadcrumb_child_foot }\n
error breadcrumb_foot </div>\n
__END__

=head1 NAME

Blosxom Plug-in: categories

=head1 SYNOPSIS

Purpose: Provides category-based navigation aids

  * $category::category -- outline/tree-style category list
  * $category::breadcrumbs -- breadcrumbs/yahoo-style category display

=head1 VERSION

0+3i

3rd test release

=head1 AUTHOR

Todd Larason  <jtl@molehill.org>, http://molelog.molehill.org/

=head1 BUGS

None known; address bug reports and comments to me or to the Blosxom
mailing list [http://www.yahoogroups.com/groups.blosxom].

=head1 Customization

=head2 Configuration variables

C<$story_count_cumulative> controls whether the story count displayed
with categories includes stories in sub-categories or not.

C<@prune_dirs> is a list of category directories to display, but to
not show children of.  This is useful if you have a section of your
category hierarchy which is very bushy.

C<$use_caching> controls whether or not to try to cache statistics and
formatted results; caching requires Storable, but the plugin will work
just fine without it.

C<$debug_level> can be set to a value between 0 and 5; 0 will output
no debug information, while 5 will be very verbose.  The default is 1,
and should be changed after you've verified the plugin is working
correctly.

=head2 Classes for CSS control

There's are some classes used, available for CSS customization.

  * C<categories> -- the main categories list
  * C<this-category> -- the line item for the currently-browsed category
  * C<breadcrumb> -- the breadcrumb line as a whole
  * C<breadcrumb-this> -- the section of the breadcrumb line for the current 
    category 

=head2 Flavour-style files

If you want a format change that can't be made by CSS, you can
override the HTML generated by creating files similar to Blosxom's
flavour files.  They should be named categories.I<bit>.I<flavour>; for
available I<bit>s and their default meanings, see the C<__DATA__>
section in the plugin.

=head1 Caching

If the Storable module is available and $use_caching is set, various
bits of data will be cached; this includes the information on what
categories exist, what their children are, how many stories they have,
the contents of any flavour files, and the final formatted output of
any trees and sub-trees generated.

The cache will be flushed whenever a new story is added, so in normal
use should be invisible.  If you're making template changes however,
or are creating or removing past-dated stories, you may wish to either
disable the cache (by setting $use_caching to 0) or manually flush the
cache; this can be done by removing $plugin_state_dir/.categories.cache,
and is always safe to do.

=head1 Thanks To

  * Jason Hoffman, prodding me into XHTML validation
  * Robert Hahn, for the directory-name prettification
  * Colin Eric Johnson, for an HTML validation note
  * Earle Martin, HTML validation note

=head1 LICENSE

this Blosxom Plug-in
Copyright 2003, Todd Larason

(This license is the same as Blosxom's)

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.


